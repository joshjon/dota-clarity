AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  dota-clarity

  SAM Template for dota-clarity

Globals:
  Function:
    Timeout: 15

Parameters:
  Environment:
    Type: String
    Default: aws
    Description: (Required) The name of the environment you are working in - aws or local
    AllowedValues:
      - local
      - aws
  BucketName:
    Type: String
    Description: The name of the S3 Bucket to create to host the Dota Clarity client. This must be globally unique.
    MinLength: 5
    MaxLength: 50
    AllowedPattern: ^[A-Za-z-]+$
    ConstraintDescription: 'Required parameter. Must only contain letters or hyphens.'

Resources:
  DotaClarityApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: DotaClarityCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          DotaClarityCognitoAuthorizer:
            UserPoolArn: !GetAtt DotaClarityCognitoUserPool.Arn

  DotaClarityCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dota-clarity-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: Number
          Name: steamId
          Required: false
      EmailVerificationMessage: "Your Dota Clarity account verification code is {####}."
      EmailVerificationSubject: "Dota Clarity account verification code"

  DotaClarityCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dota-clarity-user-pool
      UserPoolId: !Ref DotaClarityCognitoUserPool
      GenerateSecret: false
  
  MatchesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${AWS::StackName}-matches-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: match_id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: "match_id"
          KeyType: "RANGE"

  CreateFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-favourite-match
      CodeUri: functions/create_favourite_match
      Handler: create_favourite_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        CreateFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites
            Method: POST

  GetFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-favourite-match
      CodeUri: functions/get_favourite_match
      Handler: get_favourite_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        GetFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}/{match_id}
            Method: GET

  GetFavouriteMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-favourite-matches
      CodeUri: functions/get_all_favourite_matches
      Handler: get_all_favourite_matches.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        GetFavouriteMatchesAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}
            Method: GET
  
  DeleteFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-delete-favourite-match
      CodeUri: functions/delete_favourite_match
      Handler: delete_favourite_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        DeleteFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}/{match_id}
            Method: DELETE

  GetMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-match
      CodeUri: functions/get_match
      Handler: get_match.lambda_handler
      Runtime: python3.8
      Events:
        GetMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/{match_id}
            Method: GET

  GetAllMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-all-matches
      CodeUri: functions/get_all_matches
      Handler: get_all_matches.lambda_handler
      Runtime: python3.8
      Events:
        GetAllMatchesAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/players/{steam_id}
            Method: GET

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref DotaClarityS3Bucket

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultRootObject: "landing.html"
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'DotaClarityS3Bucket.DomainName'
          Id: dota-clarity-origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: dota-clarity-origin
          ViewerProtocolPolicy : redirect-to-https

  DotaClarityS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  DotaClarityS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DotaClarityS3Bucket
      PolicyDocument:
        Id: Dota Clarity Frontend Bucket Policy
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub 'arn:aws:s3:::${DotaClarityS3Bucket}/*'
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
              
Outputs:
  
  WebsitePublicUrl:
    Description: 'Dota Clarity Cloudfront Public Domain'
    Value: !GetAtt CloudFrontDistribution.DomainName

  BucketName:
    Description: 'Dota Clarity S3 Bucket Name'
    Value: !Ref BucketName

  ApiGatewayUrl:
    Description: "Dota Clarity API Gateway URL for Prod stage"
    Value: !Sub "https://${DotaClarityApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref DotaClarityCognitoUserPoolClient

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref DotaClarityCognitoUserPool
