AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  dota-clarity

  SAM Template for dota-clarity

Globals:
  Function:
    Timeout: 15

Parameters:
  Environment:
    Type: String
    Default: aws
    Description: (Required) The name of the environment you are working in - aws or local
    AllowedValues:
      - local
      - aws

Resources:
  DotaClarityApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: DotaClarityCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          DotaClarityCognitoAuthorizer:
            UserPoolArn: !GetAtt DotaClarityCognitoUserPool.Arn

  DotaClarityCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dota-clarity-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      EmailVerificationMessage: "Your Dota Clarity account verification code is {####}."
      EmailVerificationSubject: "Dota Clarity account verification code"

  DotaClarityCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dota-clarity-user-pool
      UserPoolId: !Ref DotaClarityCognitoUserPool
      GenerateSecret: false

  ProfilesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${AWS::StackName}-profiles-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  MatchesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${AWS::StackName}-matches-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: match_id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: "match_id"
          KeyType: "RANGE"

  CreateProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-profile
      CodeUri: functions/profiles/create_profile/
      Handler: create_profile.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfilesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref ProfilesTable
          TABLE_ARN: !GetAtt ProfilesTable.Arn
      Events:
        CreateProfileAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /profiles
            Method: POST

  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-profile
      CodeUri: functions/profiles/get_profile/
      Handler: get_profile.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfilesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref ProfilesTable
          TABLE_ARN: !GetAtt ProfilesTable.Arn
      Events:
        GetProfileAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /profiles/{id}
            Method: GET

  CreateFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-favourite-match
      CodeUri: functions/matches/favourites/create_match/
      Handler: create_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        CreateFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites
            Method: POST

  GetFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-favourite-match
      CodeUri: functions/matches/favourites/get_match/
      Handler: get_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        GetFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}/{match_id}
            Method: GET

  GetFavouriteMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-favourite-matches
      CodeUri: functions/matches/favourites/get_matches/
      Handler: get_matches.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        GetFavouriteMatchesAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}/
            Method: GET
  
  DeleteFavouriteMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-delete-favourite-match
      CodeUri: functions/matches/favourites/delete_match/
      Handler: delete_match.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Ref MatchesTable
          TABLE_ARN: !GetAtt MatchesTable.Arn
      Events:
        DeleteFavouriteMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/favourites/{id}/{match_id}
            Method: DELETE

  GetMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-match
      CodeUri: functions/matches/get_match/
      Handler: get_match.lambda_handler
      Runtime: python3.8
      Events:
        GetMatchAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/{match_id}/
            Method: GET

  GetAllMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-get-all-matches
      CodeUri: functions/matches/get_all_matches/
      Handler: get_all_matches.lambda_handler
      Runtime: python3.8
      Events:
        GetAllMatchesAPI:
          Type: Api
          Properties:
            RestApiId: !Ref DotaClarityApi
            Path: /matches/players/{steam_id}/
            Method: GET

  # DotaClarityS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     AccessControl: PublicRead
  #     WebsiteConfiguration:
  #       IndexDocument: landing.html
  #       ErrorDocument: error.html

  # DotaClarityS3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     PolicyDocument:
  #       Id: Dota Clarity Frontend Bucket Policy
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: PublicReadForGetBucketObjects
  #           Effect: Allow
  #           Principal: "*"
  #           Action: "s3:GetObject"
  #           Resource: !Join
  #             - ""
  #             - - "arn:aws:s3:::"
  #               - !Ref DotaClarityS3Bucket
  #               - /*
  #     Bucket: !Ref DotaClarityS3Bucket

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref DotaClarityApi

  DotaClarityApiUrl:
    Description: "Dota Clarity API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${DotaClarityApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref DotaClarityCognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref DotaClarityCognitoUserPoolClient

  # WebsiteURL:
  #   Value: !GetAtt
  #     - DotaClarityS3Bucket
  #     - WebsiteURL
  #   Description: URL for Dota Clarity website hosted on S3

  # S3BucketSecureURL:
  #   Value: !Join
  #     - ""
  #     - - "https://"
  #       - !GetAtt
  #         - DotaClarityS3Bucket
  #         - DomainName
  #   Description: Name of S3 bucket to hold website content
